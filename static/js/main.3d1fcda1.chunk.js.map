{"version":3,"sources":["redux/slices/weather/constants.ts","utils/helpers.ts","utils/constants/env.ts","utils/api/weather.ts","redux/slices/weather/slice.ts","redux/store/index.ts","pages/Load/index.tsx","components/Degree/index.tsx","hooks/useReduxHooks.ts","hooks/useWeather.ts","utils/constants/breakPoint.ts","components/WeatherCard/styles.ts","components/WeatherCard/Text.tsx","components/WeatherCard/index.tsx","components/Slide/styles.ts","components/Slide/index.tsx","components/Slideshow/styles.ts","components/Slideshow/index.tsx","components/BarChart/index.tsx","utils/constants/cities.ts","components/CityPicker/index.tsx","pages/Weather/styles.ts","pages/Weather/index.tsx","pages/NotFound/index.tsx","components/Header/styles.ts","components/Header/index.tsx","App.tsx","index.tsx"],"names":["StatusType","UnitType","initialState","city","activeCard","weatherByDays","status","PENDING","activeUnit","FAHRENHEIT","getDay","date","dayjs","format","getWeatherByDays","list","days","map","day","filter","item","dt_txt","groupWeatherByDays","uniq","getWeatherListDays","convertTemperature","unitType","kelvin","CELSIUS","Math","round","convertKelvinToCelsius","convertKelvinToFahrenheit","getBarChartData","includes","temp","main","time","unix","dt","buildWeatherUrl","tempCity","process","fetchWeatherData","a","url","fetch","response","ok","json","data","Error","fetchWeather","createAsyncThunk","weatherSlice","createSlice","name","reducers","setActiveCard","state","action","payload","setActiveUnit","setCity","extraReducers","builder","addCase","pending","fulfilled","FULFILLED","rejected","REJECTED","actions","store","configureStore","reducer","weather","Load","Box","display","height","alignItems","justifyContent","CircularProgress","data-testid","Degree","value","useAppSelector","useSelector","useWeather","dispatch","useDispatch","getWeather","weatherItemsPerSlide","chunk","itemsPerSlide","barChartData","useStyles","makeStyles","card","width","mobile","marginBottom","text","media","maxWidth","marginTop","Text","classes","Grid","xs","Typography","className","color","component","WeatherCard","matches","useMediaQuery","breakPoint","wind","rain","isActiveCard","isEqual","Card","cn","raised","CardActionArea","onClick","CardContent","container","variant","CardMedia","alt","image","icon","title","noWrap","description","temp_min","temp_max","humidity","speed","centeredCard","margin","Slide","slide","shouldCenterContent","flexDirection","carousel","padding","Slideshow","autoPlay","animation","indicators","cycleNavigation","navButtonsAlwaysVisible","navButtonsWrapperProps","style","length","BarChart","barWidth","Paper","valueField","argumentField","Weather","FormControl","InputLabel","htmlFor","Select","native","label","onChange","event","target","inputProps","id","cities","cityName","weatherPage","textAlign","cityPicker","slideShow","CityPicker","NotFound","root","flexGrow","position","Header","isCelsius","AppBar","Toolbar","spacing","Switch","checked","App","useEffect","Container","fixed","paddingTop","renderContent","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.3d1fcda1.chunk.js","sourcesContent":["import { List } from \"utils/interfaces/IWeather\";\n\nexport enum StatusType {\n  PENDING = \"pending\",\n  REJECTED = \"rejected\",\n  FULFILLED = \"fulfilled\",\n}\n\nexport enum UnitType {\n  CELSIUS = \"C\",\n  FAHRENHEIT = \"F\",\n}\n\nexport type WeatherState = {\n  city: string;\n  status: StatusType;\n  activeUnit: UnitType;\n  activeCard: List | null;\n  weatherByDays: List[][];\n};\n\nexport const initialState: WeatherState = {\n  city: \"\",\n  activeCard: null,\n  weatherByDays: [],\n  status: StatusType.PENDING,\n  activeUnit: UnitType.FAHRENHEIT,\n};\n","import { uniq, chunk } from \"lodash\";\nimport dayjs from \"dayjs\";\nimport { UnitType } from \"redux/slices/weather\";\nimport { WEATHER_API, APP_APPID } from \"utils/constants/env\";\nimport { List } from \"./interfaces/IWeather\";\nimport { IBarChart } from \"./interfaces/IBarChart\";\n\nexport const getDay = (date: string): string => dayjs(date).format(\"DD\");\n\nexport const getWeatherListDays = (list: List[]): string[] =>\n  uniq(list?.map((item) => getDay(item.dt_txt!)));\n\nexport const groupWeatherByDays = (days: string[], list: List[]): List[][] =>\n  days.map((day: string) =>\n    list?.filter((item) => getDay(item.dt_txt!) === day)\n  );\n\nexport const getWeatherItemsPerSlide = (weatherByDays: List[][]): List[][] =>\n  chunk(weatherByDays, 3).map((itemsPerSlide) =>\n    itemsPerSlide.map((item) => item[0])\n  );\n\nexport const getWeatherByDays = (list: List[]): List[][] => {\n  const days = getWeatherListDays(list);\n  return groupWeatherByDays(days, list);\n};\n\nexport const convertKelvinToCelsius = (kelvin: number): number =>\n  Math.round(kelvin - 273.15);\n\nexport const convertKelvinToFahrenheit = (kelvin: number): number =>\n  Math.round(((kelvin - 273.15) * 9) / 5 + 32);\n\nexport const convertTemperature = (\n  unitType: UnitType,\n  kelvin: number\n): number =>\n  unitType === UnitType.CELSIUS\n    ? convertKelvinToCelsius(kelvin)\n    : convertKelvinToFahrenheit(kelvin);\n\nexport const getBarChartData = (\n  unitType: UnitType,\n  weatherByDays: List[][],\n  activeCard: List\n): IBarChart[] =>\n  weatherByDays\n    .filter((day) => day.includes(activeCard!))[0]\n    ?.map((list) => ({\n      temp: convertTemperature(unitType, list.main.temp),\n      time: dayjs.unix(list.dt).format(\"h a\"),\n    }));\n\nexport const buildWeatherUrl = (city?: string): string => {\n  const tempCity = city || \"Munich\";\n  // This is a workaround to mock a city selection feature.\n  // In a real life scenario we should get a list of cities via API and\n  // use the Geolocation API\n\n  return `${WEATHER_API}?q=${tempCity},de&APPID=${APP_APPID}&cnt=40`;\n};\n","export const WEATHER_API: string = process.env.REACT_APP_WEATHER_API || \"\";\nexport const APP_APPID: string = process.env.REACT_APP_APPID || \"\";\nexport const WEATHER_ICON: string = process.env.REACT_APP_WEATHER_ICONS || \"\";\n","import { RootWeatherObject } from \"utils/interfaces/IWeather\";\nimport { buildWeatherUrl } from \"utils/helpers\";\n\nconst fetchWeatherData = async (city?: string): Promise<RootWeatherObject> => {\n  try {\n    const url = buildWeatherUrl(city);\n    const response = await fetch(url);\n\n    if (response.ok) {\n      const data = await response.json();\n      return data;\n    }\n    throw new Error(\"Something went wrong\");\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport default fetchWeatherData;\n","/* eslint-disable no-param-reassign */\nimport fetchWeatherData from \"utils/api/weather\";\nimport { getWeatherByDays } from \"utils/helpers\";\nimport { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport { List } from \"utils/interfaces/IWeather\";\nimport { initialState, StatusType, UnitType } from \"./constants\";\n\nexport const fetchWeather = createAsyncThunk(\n  \"weather/fetchWeather\",\n  async (city?: string) => fetchWeatherData(city)\n);\n\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    setActiveCard: (state, action: PayloadAction<List>) => {\n      state.activeCard = action.payload;\n    },\n    setActiveUnit: (state, action: PayloadAction<UnitType>) => {\n      state.activeUnit = action.payload;\n    },\n    setCity: (state, action: PayloadAction<string>) => {\n      state.city = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchWeather.pending, (state) => {\n      state.status = StatusType.PENDING;\n    });\n    builder.addCase(fetchWeather.fulfilled, (state, action) => {\n      const weatherByDays = getWeatherByDays(action.payload?.list);\n\n      state.activeCard = action.payload?.list[0];\n      state.city = action.payload?.city.name;\n      state.weatherByDays = weatherByDays;\n      state.status = StatusType.FULFILLED;\n    });\n    builder.addCase(fetchWeather.rejected, (state) => {\n      state.city = \"\";\n      state.weatherByDays = [];\n      state.status = StatusType.REJECTED;\n    });\n  },\n});\n\nexport const { setActiveCard, setActiveUnit, setCity } = weatherSlice.actions;\nexport default weatherSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { weatherSlice } from \"redux/slices/weather\";\n\nconst store = configureStore({\n  reducer: {\n    weather: weatherSlice,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nconst Load: React.FC = () => (\n  <Box\n    display=\"flex\"\n    height=\"100vh\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n  >\n    <CircularProgress data-testid=\"loader\" />\n  </Box>\n);\nexport default Load;\n","import React from \"react\";\n\ninterface Props {\n  value: string | number;\n}\n\nconst Degree: React.FC<Props> = ({ value }) => <span>{`${value}\\u00b0`}</span>;\n\nexport default Degree;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"redux/store\";\n\nexport const useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { getWeatherItemsPerSlide, getBarChartData } from \"utils/helpers\";\nimport { useAppSelector, useAppDispatch } from \"hooks/useReduxHooks\";\nimport { List } from \"utils/interfaces/IWeather\";\nimport {\n  UnitType,\n  fetchWeather,\n  setActiveCard,\n  setActiveUnit,\n  setCity,\n} from \"redux/slices/weather\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst useWeather = () => {\n  const dispatch = useAppDispatch();\n  const weather = useAppSelector((state) => state.weather);\n\n  return {\n    city: weather.city,\n    status: weather.status,\n    activeUnit: weather.activeUnit,\n    activeCard: weather.activeCard,\n    getWeather: () => dispatch(fetchWeather()),\n    weatherItemsPerSlide: getWeatherItemsPerSlide(weather.weatherByDays),\n    setActiveCard: (activeCard: List) => dispatch(setActiveCard(activeCard)),\n    setCity: (city: string) => {\n      dispatch(setCity(city));\n      dispatch(fetchWeather(city));\n    },\n    barChartData: getBarChartData(\n      weather.activeUnit,\n      weather.weatherByDays,\n      weather.activeCard!\n    ),\n    setActiveUnit: (activeUnit: UnitType) =>\n      dispatch(setActiveUnit(activeUnit)),\n  };\n};\n\nexport default useWeather;\n","export default \"(min-width:769px)\";\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  card: {\n    width: \"30%\",\n  },\n  mobile: {\n    width: \"100%\",\n    marginBottom: \"1rem\",\n  },\n  text: {\n    marginBottom: 12,\n  },\n  media: {\n    maxWidth: \"100px\",\n    height: \"auto\",\n    marginTop: \"-20px\",\n  },\n});\n\nexport default useStyles;\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Grid } from \"@material-ui/core\";\nimport useStyles from \"./styles\";\n\ninterface Props {\n  value: string | number;\n}\n\nconst Text: React.FC<Props> = ({ value }) => {\n  const classes = useStyles();\n  return (\n    <Grid item xs={12}>\n      <Typography\n        className={classes.text}\n        color=\"textSecondary\"\n        component=\"span\"\n      >\n        {value}\n      </Typography>\n    </Grid>\n  );\n};\n\nexport default Text;\n","import React from \"react\";\nimport dayjs from \"dayjs\";\nimport { isEqual } from \"lodash\";\nimport Degree from \"components/Degree\";\nimport Card from \"@material-ui/core/Card\";\nimport useWeather from \"hooks/useWeather\";\nimport { List } from \"utils/interfaces/IWeather\";\nimport { convertTemperature } from \"utils/helpers\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport { WEATHER_ICON } from \"utils/constants/env\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport { Grid } from \"@material-ui/core\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport cn from \"classnames\";\nimport breakPoint from \"utils/constants/breakPoint\";\nimport useStyles from \"./styles\";\nimport Text from \"./Text\";\n\ninterface Props {\n  data: List;\n  className?: string;\n}\n\nconst WeatherCard: React.FC<Props> = ({ data, className }) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(breakPoint);\n  const { setActiveCard, activeCard, activeUnit } = useWeather();\n\n  const { main, weather, dt, wind, rain } = data;\n  const isActiveCard = isEqual(activeCard, data);\n\n  return (\n    <Card\n      className={cn(classes.card, className, {\n        [classes.mobile]: !matches,\n      })}\n      raised={isActiveCard}\n    >\n      <CardActionArea onClick={() => setActiveCard(data)}>\n        <CardContent>\n          <Grid container>\n            <Grid item xs={6}>\n              <Typography variant={!matches ? \"h2\" : \"h3\"} component=\"span\">\n                <Degree value={convertTemperature(activeUnit, main?.temp)} />\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <CardMedia\n                className={classes.media}\n                component=\"img\"\n                alt=\"Weather icon\"\n                image={`${WEATHER_ICON}${weather[0]?.icon}@2x.png`}\n                title=\"Weather icon\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Typography\n                className={classes.text}\n                color=\"textPrimary\"\n                component=\"span\"\n              >\n                {dayjs.unix(dt).format(\"D\tMMM YYYY\")}\n              </Typography>\n              <Typography noWrap className={classes.text} color=\"textSecondary\">\n                {`${weather[0]?.main}, ${weather[0]?.description}`}\n              </Typography>\n            </Grid>\n            {matches && (\n              <>\n                <Text\n                  value={`L: ${convertTemperature(\n                    activeUnit,\n                    main?.temp_min\n                  )} H: ${convertTemperature(activeUnit, main?.temp_max)}`}\n                />\n                <Text value={`Humidity: ${main?.humidity}%`} />\n                <Text value={`Wind: ${wind.speed} km/h`} />\n                <Text value={`Precipitation: ${rain ? rain[\"3h\"] : \"-\"}`} />\n              </>\n            )}\n          </Grid>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n};\n\nexport default WeatherCard;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  centeredCard: {\n    margin: \"1rem\",\n  },\n});\n\nexport default useStyles;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport WeatherCard from \"components/WeatherCard\";\nimport { List } from \"utils/interfaces/IWeather\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport breakPoint from \"utils/constants/breakPoint\";\nimport useStyles from \"./styles\";\n\ninterface Props {\n  slide: List[];\n  shouldCenterContent?: boolean;\n}\n\nconst Slide: React.FC<Props> = ({ slide, shouldCenterContent }) => {\n  const classes = useStyles();\n  const matches = useMediaQuery(breakPoint);\n\n  return (\n    <Box\n      data-testid=\"slide\"\n      display=\"flex\"\n      height=\"100%\"\n      flexDirection={matches ? \"row\" : \"column\"}\n      alignItems=\"center\"\n      justifyContent={shouldCenterContent ? \"center\" : \"space-between\"}\n    >\n      {slide.map((card) => (\n        <WeatherCard\n          className={shouldCenterContent ? classes.centeredCard : \"\"}\n          data={card}\n          key={card.dt}\n        />\n      ))}\n    </Box>\n  );\n};\n\nexport default Slide;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  carousel: {\n    padding: \"1rem 3.5rem\",\n  },\n});\n\nexport default useStyles;\n","import React from \"react\";\nimport Slide from \"components/Slide\";\nimport useWeather from \"hooks/useWeather\";\nimport Carousel from \"react-material-ui-carousel\";\nimport cn from \"classnames\";\nimport useStyles from \"./styles\";\n\ninterface Props {\n  className?: string;\n}\n\nconst Slideshow: React.FC<Props> = ({ className }) => {\n  const classes = useStyles();\n  const { weatherItemsPerSlide } = useWeather();\n\n  return (\n    <Carousel\n      className={cn(className, classes.carousel)}\n      autoPlay={false}\n      animation=\"slide\"\n      indicators={false}\n      cycleNavigation={false}\n      navButtonsAlwaysVisible\n      navButtonsWrapperProps={{\n        className: \"buttons-wrapper\",\n        style: {\n          margin: \"auto -10px\",\n        },\n      }}\n    >\n      {weatherItemsPerSlide.map((slide) => (\n        <Slide\n          key={slide[0].dt}\n          slide={slide}\n          shouldCenterContent={slide.length < 3}\n        />\n      ))}\n    </Carousel>\n  );\n};\n\nexport default Slideshow;\n","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Animation } from \"@devexpress/dx-react-chart\";\nimport useWeather from \"hooks/useWeather\";\nimport {\n  Chart,\n  BarSeries,\n  Title,\n  ArgumentAxis,\n  ValueAxis,\n} from \"@devexpress/dx-react-chart-material-ui\";\n\nconst BarChart: React.FC = () => {\n  const { barChartData } = useWeather();\n  const barWidth = barChartData?.length <= 3 ? 0.2 : 1;\n\n  return (\n    <Paper>\n      <Chart data={barChartData}>\n        <ArgumentAxis />\n        <ValueAxis />\n        <BarSeries valueField=\"temp\" argumentField=\"time\" barWidth={barWidth} />\n        <Title text=\"Rest of the day\" />\n        <Animation />\n      </Chart>\n    </Paper>\n  );\n};\n\nexport default BarChart;\n","export default [\"Berlin\", \"Munich\", \"Frankfurt\", \"Hamburg\"];\n","import React from \"react\";\nimport useWeather from \"hooks/useWeather\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport cities from \"utils/constants/cities\";\n\ninterface Props {\n  className?: string;\n}\n\nconst Weather: React.FC<Props> = ({ className }) => {\n  const { city, setCity } = useWeather();\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setCity(event.target.value as string);\n  };\n\n  return (\n    <FormControl variant=\"outlined\" className={className}>\n      <InputLabel htmlFor=\"city-select\">City</InputLabel>\n      <Select\n        native\n        value={city}\n        label=\"City\"\n        onChange={handleChange}\n        inputProps={{\n          name: \"city\",\n          id: \"city-select\",\n        }}\n      >\n        {cities.map((cityName: string) => (\n          <option key={cityName} data-testid=\"select-option\" value={cityName}>\n            {cityName}\n          </option>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default Weather;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  weatherPage: {\n    padding: \"2rem 0\",\n  },\n  mobile: {\n    textAlign: \"center\",\n  },\n  cityPicker: {\n    width: \"100%\",\n    display: \"flex\",\n    marginBottom: \"0.5rem\",\n    justifyContent: \"center\",\n  },\n  slideShow: {\n    marginBottom: \"1.5rem\",\n  },\n});\n\nexport default useStyles;\n","import React from \"react\";\nimport Slideshow from \"components/Slideshow\";\nimport BarChart from \"components/BarChart\";\nimport CityPicker from \"components/CityPicker\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport cn from \"classnames\";\nimport breakPoint from \"utils/constants/breakPoint\";\nimport useStyles from \"./styles\";\n\nconst Weather: React.FC = () => {\n  const classes = useStyles();\n  const matches = useMediaQuery(breakPoint);\n\n  return (\n    <section\n      className={cn(classes.weatherPage, {\n        [classes.mobile]: !matches,\n      })}\n      data-testid=\"weather\"\n    >\n      <div className={classes.cityPicker}>\n        <CityPicker />\n      </div>\n      <Slideshow className={classes.slideShow} />\n      <BarChart />\n    </section>\n  );\n};\n\nexport default Weather;\n","import React from \"react\";\nimport { Box } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst NotFound: React.FC = () => (\n  <Box\n    display=\"flex\"\n    height=\"100vh\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n  >\n    <Typography variant=\"h4\" component=\"h2\">\n      Ups... Something went wrong.\n    </Typography>\n  </Box>\n);\n\nexport default NotFound;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  mobile: {\n    display: \"flex\",\n    position: \"fixed\",\n  },\n});\n\nexport default useStyles;\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport useWeather from \"hooks/useWeather\";\nimport { UnitType } from \"redux/slices/weather\";\nimport Degree from \"components/Degree\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport breakPoint from \"utils/constants/breakPoint\";\nimport useStyles from \"./styles\";\n\nconst Header: React.FC = () => {\n  const classes = useStyles();\n  const { setActiveUnit, activeUnit } = useWeather();\n  const matches = useMediaQuery(breakPoint);\n\n  const { CELSIUS, FAHRENHEIT } = UnitType;\n  const isCelsius = activeUnit === CELSIUS;\n\n  const handleOnChange = () => {\n    const newValue = isCelsius ? FAHRENHEIT : CELSIUS;\n    setActiveUnit(newValue);\n  };\n\n  return (\n    <div\n      className={classes.root}\n      data-testid={!isCelsius ? \"c-active\" : \"f-active\"}\n    >\n      <AppBar position=\"static\" className={!matches ? classes.mobile : \"\"}>\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Weather App\n          </Typography>\n          <Typography component=\"div\">\n            <Grid component=\"label\" container alignItems=\"center\" spacing={1}>\n              <Grid item>\n                <Degree value={CELSIUS} />\n              </Grid>\n              <Grid item>\n                <Switch\n                  data-testid=\"switch\"\n                  color=\"default\"\n                  checked={!isCelsius}\n                  onChange={handleOnChange}\n                />\n              </Grid>\n              <Grid item>\n                <Degree value={FAHRENHEIT} />\n              </Grid>\n            </Grid>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Header;\n","import Load from \"pages/Load\";\nimport Weather from \"pages/Weather\";\nimport NotFound from \"pages/NotFound\";\nimport Header from \"components/Header\";\nimport React, { useEffect } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport { StatusType } from \"redux/slices/weather\";\nimport useWeather from \"hooks/useWeather\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n\nconst App: React.FC = () => {\n  const { status, getWeather } = useWeather();\n  const matches = useMediaQuery(\"(min-width:769px)\");\n\n  useEffect(() => {\n    getWeather();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const renderContent = (): JSX.Element => {\n    const { PENDING, FULFILLED, REJECTED } = StatusType;\n\n    if (status === PENDING) return <Load />;\n    if (status === FULFILLED) return <Weather />;\n    if (status === REJECTED) return <NotFound />;\n\n    return <></>;\n  };\n\n  return (\n    <>\n      <Header />\n      <Container className=\"App\" fixed style={{ paddingTop: matches ? 0 : 50 }}>\n        {renderContent()}\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"redux/store\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <CssBaseline />\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}